[tool.poetry]
name = "tmlt.core"
description = "Tumult's differential privacy primitives"
readme = "README.md"
authors = []
license = "Apache-2.0"
repository = "https://gitlab.com/tumult-labs/core"
documentation = "https://docs.tmlt.dev/core/latest"
# The version field is required in this file format, even though it's ignored because of poetry-dynamic-versioning.
version = "0.0.0"

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Natural Language :: English",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Scientific/Engineering",
  "Topic :: Security",
]
include = [
  { path = "doc/", format = "sdist" },
  { path = "examples/", format = "sdist" },
  { path = "ext/", format = "sdist" },
  { path = "benchmark/", format = "sdist" },
  { path = "test/", format = "sdist" },
  { path = "CHANGELOG.md", format = "sdist" },
  { path = "test_requirements.txt", format = "sdist" },
  { path = "LICENSE", format = "sdist" },
  { path = "NOTICE", format = "sdist" },
  { path = "src/tmlt/core/ext/*.py", format = "wheel" },
  { path = "src/tmlt/core/ext/lib/*", format = "wheel" },
]
packages = [{ include = "tmlt", from = "src" }]

[tool.poetry.build]
script = "ext/build.py"
generate-setup-file = false

[tool.poetry.dependencies]
python = "^3.7.1, <3.12"
numpy = [
  { version = "~1.21.0", python = "<3.8" },
  { version = ">=1.22.0,<1.25.0", python = ">=3.8,<3.9" },
  { version = "^1.23.2,<=1.26.1", python = ">=3.9" },
]
pandas = [
  { version = ">=1.2.0,<1.4.0", python = "<3.8" },
  { version = ">=1.2.0,<2.0.0", python = ">=3.8,<3.10" },
  { version = ">=1.4.0,<2.0.0", python = ">=3.10,<3.11" },
  { version = ">=1.5.0,<2.0.0", python = ">=3.11" },
]
pyarrow = [
  { version = ">=6.0.1,<13.0.0", python = "<3.8" },
  { version = "^14.0.1", python = ">=3.8" },
]
pyarrow-hotfix = [
  { version = "^0.6", python = "<3.8" },
]
pyspark = [
  { version = "^3.0.0,<3.4.0", extras = ["sql"], python = "<3.8" },
  { version = "^3.0.0", extras = ["sql"], python = ">=3.8,<3.11" },
  { version = "^3.4.0", extras = ["sql"], python = ">=3.11" },
]
randomgen = [
  { version = ">=1.19.0,<1.26.0", python = ">=3.7,<3.8" },
  { version = ">=1.19.0,<=1.26.0", python = ">=3.8,<3.9" },
  { version = ">=1.20.0,<=1.26.0", python = ">=3.9,<3.10" },
  { version = ">=1.23.0,<=1.26.0", python = ">=3.10,<3.11" },
  { version = ">=1.26.0,<=1.26.0", python = ">=3.11" },
]
scipy = [
  { version = "^1.4.1,<1.8.0", python = "<3.8" },
  { version = "^1.6.0,<1.11.0", python = ">=3.8,<3.9" },
  { version = "^1.6.0", python = ">=3.9,<3.10" },
  { version = "^1.8.0", python = ">=3.10,<3.11" },
  { version = "^1.9.2", python = ">=3.11" },
]
sympy = "^1.8,<1.10"
typeguard = "^2.12.1,<2.13.0"
# typing_extensions uses a mixture of 3-segment and 4-segment versions. When
# specifying version numbers here (in particular using the ^ notation), only use
# 3-segment version numbers as the minimum version -- using a 4-segment version
# can cause some unexpected behaviors, like allowing 3-segment versions that
# should be excluded.
typing_extensions = "^4.1.0"
pytest = "^7.3.1"

[tool.pytest.ini_options]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "serial",
]

[tool.coverage.run]
omit = ["**/core/ext/*"]

[tool.coverage.paths]
# Treat all nox environments as the same for the purposes of coverage. This
# makes the paths reported by coverage a lot cleaner, and in future could allow
# us to combine the coverage data from multiple test jobs into a single report.
source = ["src/tmlt/core", ".nox/**/site-packages/tmlt/core"]

[tool.poetry.dev-dependencies]
# Build scripting
nox = "2022.8.7"
nox_poetry = "1.0.1"
polling2 = "0.5.0"
requests = "*"

# Linters, formatters
black = "^23"
isort = { version = "^5.11", extras = ["pyproject"] }
mypy = "^1.2"
pydocstyle = { version = "^6.3", extras = ["toml"] }
pylint = "^2.13"

# Testing
parameterized = "^0.7.4"
pytest_cov = "^4.0.0"

# Docs
pydata-sphinx-theme = "0.9.0"
scanpydoc = "0.7.3"                 # 0.7.4 doesn't work
sphinx = "^4.3.0"
sphinx-autoapi = "^1.7.0"
sphinx-autodoc-typehints = "1.12.0" # 1.13.0 doesn't work https://gitlab.com/tumult-labs/tumult/-/issues/1565
sphinx-copybutton = "^0.4.0"
sphinx-panels = "^0.6.0"
sphinxcontrib-bibtex = "^1.0.0"

cibuildwheel = "^2.10.0"

# click 8.1.0 removes _unicodefun which breaks the CI; remove this after
# upgrading Black.
click = "8.0.4"
# dunamai 1.19.0 introduces a breaking change that some of our dev dependencies don't seem
# to handle yet. If we ever update them (scanpydoc is a particular problem I think), try
# removing this pin.
dunamai = "<1.19.0"

[build-system]
build-backend = "poetry_dynamic_versioning.backend"
requires = ["poetry-core>=1.3.2", "poetry-dynamic-versioning"]

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"
pattern = "^(?P<base>\\d+\\.\\d+\\.\\d+)(-(?P<stage>[a-zA-Z]+)\\.(?P<revision>\\d+))?"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.mypy]
explicit_package_bases = true
follow_imports = "silent"
ignore_missing_imports = true
namespace_packages = true
check_untyped_defs = true
mypy_path = "$MYPY_CONFIG_FILE_DIR/src"

[tool.pylint.master]
# See https://github.com/PyCQA/pylint/issues/1975#issuecomment-387924981
extension-pkg-whitelist = ['numpy']
load-plugins = ['pylint.extensions.docparams']
# Only check param docs in docstrings that contain an Args: section.
# Set to "no" to show docstrings missing argument documentation.
accept-no-param-doc = true

[tool.pylint.'MESSAGES CONTROL']
disable = [
  'arguments-differ',
  'bad-continuation',
  'duplicate-code',
  'fixme',
  'invalid-name',
  'logging-format-interpolation',
  'logging-fstring-interpolation',
  'missing-raises-doc',
  'missing-return-doc',
  'no-else-return',
  'super-init-not-called',
  'too-few-public-methods',
  'too-many-ancestors',
  'too-many-arguments',
  'too-many-branches',
  'too-many-instance-attributes',
  'too-many-lines',
  'too-many-locals',
  'too-many-public-methods',
  'too-many-return-statements',
  'too-many-statements',
  'unbalanced-tuple-unpacking',
  'unsubscriptable-object',
  'wrong-import-order',
]

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pydocstyle]
convention = "google"
add-ignore = [
  # `D200: One-line docstring should fit on one line with quotes`
  # conflicts with pylint's `max-line-length`.
  "D200",
]

[tool.cibuildwheel]
build = "cp37-* cp38-* cp39-* cp310-* cp311-*"
skip = "*-musllinux*"

[tool.cibuildwheel.linux]
archs = ["x86_64"]
